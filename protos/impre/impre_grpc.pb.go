// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: protos/impre/impre.proto

package impre

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmisionesClient is the client API for Emisiones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmisionesClient interface {
	TestPdf(ctx context.Context, in *TestPdfRequest, opts ...grpc.CallOption) (*TestPdfReply, error)
}

type emisionesClient struct {
	cc grpc.ClientConnInterface
}

func NewEmisionesClient(cc grpc.ClientConnInterface) EmisionesClient {
	return &emisionesClient{cc}
}

func (c *emisionesClient) TestPdf(ctx context.Context, in *TestPdfRequest, opts ...grpc.CallOption) (*TestPdfReply, error) {
	out := new(TestPdfReply)
	err := c.cc.Invoke(ctx, "/impre.Emisiones/TestPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmisionesServer is the server API for Emisiones service.
// All implementations must embed UnimplementedEmisionesServer
// for forward compatibility
type EmisionesServer interface {
	TestPdf(context.Context, *TestPdfRequest) (*TestPdfReply, error)
	mustEmbedUnimplementedEmisionesServer()
}

// UnimplementedEmisionesServer must be embedded to have forward compatible implementations.
type UnimplementedEmisionesServer struct {
}

func (UnimplementedEmisionesServer) TestPdf(context.Context, *TestPdfRequest) (*TestPdfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPdf not implemented")
}
func (UnimplementedEmisionesServer) mustEmbedUnimplementedEmisionesServer() {}

// UnsafeEmisionesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmisionesServer will
// result in compilation errors.
type UnsafeEmisionesServer interface {
	mustEmbedUnimplementedEmisionesServer()
}

func RegisterEmisionesServer(s grpc.ServiceRegistrar, srv EmisionesServer) {
	s.RegisterService(&Emisiones_ServiceDesc, srv)
}

func _Emisiones_TestPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmisionesServer).TestPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impre.Emisiones/TestPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmisionesServer).TestPdf(ctx, req.(*TestPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Emisiones_ServiceDesc is the grpc.ServiceDesc for Emisiones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emisiones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impre.Emisiones",
	HandlerType: (*EmisionesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestPdf",
			Handler:    _Emisiones_TestPdf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/impre/impre.proto",
}
